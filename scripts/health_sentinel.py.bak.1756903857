#!/usr/bin/env python3
from __future__ import annotations

import os, json, subprocess
from pathlib import Path
from datetime import datetime, timedelta, time as _t

ROOT = Path.home() / "angel-one-smart-bot"
DATA = ROOT / "data"
LOG  = DATA / "autopilot.out"
PNL  = DATA / "pnl.json"

# ---- env (best-effort) ----
try:
    from dotenv import load_dotenv
    load_dotenv(ROOT / ".env", override=True)
except Exception:
    pass

# ---- notifier shim ----
try:
    from scripts.notify import send as _send
except Exception:
    try:
        from notify import send as _send
    except Exception:
        def _send(*a, **k): return False
send = _send

def now_local() -> datetime:
    # Termux is already on Asia/Kolkata per your setup
    return datetime.now()

def is_market_hours_ist(dt: datetime) -> bool:
    # Mon‚ÄìFri, 09:00‚Äì15:45 IST
    if dt.weekday() > 4:
        return False
    t = dt.time()
    return _t(9, 0) <= t <= _t(15, 45)

def read_pnl_ts() -> datetime | None:
    try:
        j = json.loads(PNL.read_text())
        ts = int(j.get("ts") or 0)
        return datetime.fromtimestamp(ts) if ts else None
    except Exception:
        return None

def autopilot_pid() -> str | None:
    try:
        out = subprocess.run(
            ["bash","-lc","pgrep -af 'python3 .*scripts/autopilot.py' | awk '{print $1}' | head -n1"],
            capture_output=True, text=True
        ).stdout.strip()
        return out or None
    except Exception:
        return None

def kick_guardian() -> None:
    try:
        subprocess.run(["bash","-lc", f"{ROOT}/scripts/guardian.sh"], check=False)
    except Exception:
        pass

def main() -> int:
    now = now_local()
    issues: list[str] = []

    # 1) Autopilot process
    pid = autopilot_pid()
    if not pid:
        issues.append("‚ùå Autopilot process not running")

    # 2) Log freshness (6 min) ‚Äî only during market hours
    if is_market_hours_ist(now):
        try:
            mtime = datetime.fromtimestamp(LOG.stat().st_mtime)
            if (now - mtime) > timedelta(minutes=6):
                mins = int((now - mtime).total_seconds() // 60)
                issues.append(f"‚ö†Ô∏è Log stale: {mins} min")
        except Exception:
            issues.append("‚ö†Ô∏è Log file missing")

    # 3) PnL freshness during market hours (6 min)
    if is_market_hours_ist(now):
 # PnL freshness during market hours (6 min)
    if is_market_hours_ist(now):
        pts = read_pnl_ts()
        if not pts:
            issues.append("‚ö†Ô∏è PnL ts missing")
        elif (now - pts) > timedelta(minutes=6):
            mins = int((now - pts).total_seconds() // 60)
            issues.append(f"‚ö†Ô∏è PnL stale: {mins} min")

    if issues:
        # extra diagnostics
        try:
            pid_str = pid or "-"
            mtime_str = datetime.fromtimestamp(LOG.stat().st_mtime).strftime("%H:%M:%S") if LOG.exists() else "-"
            pts_val = read_pnl_ts()
            pts_str = pts_val.strftime("%H:%M:%S") if pts_val else "-"
            extra = [f"PID: {pid_str}", f"log_ts: {mtime_str}", f"pnl_ts: {pts_str}"]
        except Exception:
            extra = []

        msg = "ü©∫ Health Sentinel\n" + "\n".join(f"‚Ä¢ {x}" for x in issues + extra)
        send(msg)
        kick_guardian()
        print(json.dumps({"event":"health_sentinel_alert","issues":issues}), flush=True)
    else:
        print(json.dumps({"event":"health_sentinel_ok"}), flush=True)
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
