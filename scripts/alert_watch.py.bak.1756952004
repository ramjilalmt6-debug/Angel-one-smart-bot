#!/usr/bin/env python3
import os, json
from pathlib import Path

ROOT = Path.home()/ "angel-one-smart-bot"
DATA = ROOT/ "data"
LOG  = DATA/ "autopilot.out"
OFF  = DATA/ "alert.offset"

# Load .env (with fallback manual parse)
try:
    from dotenv import load_dotenv
    load_dotenv(ROOT/".env", override=True)
except Exception:
    envp = ROOT/".env"
    if envp.exists():
        for ln in envp.read_text().splitlines():
            if "=" in ln and not ln.strip().startswith("#"):
                k, v = ln.split("=", 1)
                os.environ.setdefault(k.strip(), v.strip())

# Wire notify
def send(msg: str) -> bool:
    try:
        import importlib.util
        spec = importlib.util.spec_from_file_location("notify", str(ROOT/"scripts"/"notify.py"))
        mod = importlib.util.module_from_spec(spec)         # type: ignore
        spec.loader.exec_module(mod)                        # type: ignore
        return bool(mod.send(msg))
    except Exception:
        return False

WATCH_EVENTS = {
    "login_fail",
    "trend_switched",
    "health_sentinel_alert",
    "risk_guard_trip",
    "guardian_crash",
}

def load_offset() -> int:
    try:
        return int(OFF.read_text().strip())
    except Exception:
        return 0

def save_offset(n: int):
    try:
        OFF.write_text(str(n))
    except Exception:
        pass

def main() -> int:
    if not LOG.exists():
        print(json.dumps({"event":"alert_watch_note","msg":"log_missing"}))
        return 0

    # Handle rotation: if file shrank, reset offset
    offset = load_offset()
    sz = LOG.stat().st_size
    if offset > sz:
        offset = 0

    with LOG.open("rb") as f:
        f.seek(offset)
        new_data = f.read()
        new_off = f.tell()

    sent = 0
    for raw in new_data.splitlines():
        try:
            line = raw.decode("utf-8", "replace").strip()
            if not line or not line.startswith("{"):
                continue
            J = json.loads(line)
            ev = str(J.get("event") or "")
        except Exception:
            continue

        if ev in WATCH_EVENTS:
            if ev == "login_fail":
                msg = f"⚠️ Login FAIL: {J.get('err','')[:180]}"
            elif ev == "trend_switched":
                msg = f"🔀 Switched {J.get('from')} → {J.get('to')} (ADX {J.get('adx')}, {J.get('status')})"
            elif ev == "health_sentinel_alert":
                issues = ", ".join(J.get("issues", []))[:300]
                msg = f"🚑 Health issue: {issues}"
            elif ev == "risk_guard_trip":
                msg = "🛑 Risk Guard tripped. Positions square-off attempted."
            else:
                msg = f"ℹ️ {ev}"
            if send(msg):
                sent += 1

    save_offset(new_off)
    print(json.dumps({"event":"alert_watch_ok","processed_bytes":len(new_data),"sent":sent}))
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
